#!/usr/bin/env ruby

require "colorize"
require "io/wait"
require "optparse"
require "pstream"
require "string"

class PStreamExit
    GOOD = 0
    INVALID_OPTION = 1
    INVALID_ARGUMENT = 2
    MISSING_ARGUMENT = 3
    EXTRA_ARGUMENTS = 4
    EXCEPTION = 5
end

def parse(args)
    options = Hash.new
    options["ciphers"] = false
    options["prot"] = "tcp"
    options["stream"] = nil
    options["verbose"] = false

    info = "Analyze pcap files. Can view tcp/udp streams or " \
        "ciphersuites in use."

    parser = OptionParser.new do |opts|
        opts.banner = "Usage: #{File.basename($0)} [OPTIONS] <pcap>"

        opts.on(
            "-c",
            "--ciphersuites",
            "Show ciphersuite negotiation from ssl handshakes"
        ) do
            options["ciphers"] = true
        end

        opts.on("-h", "--help", "Display this help message") do
            puts opts
            exit PStreamExit::GOOD
        end

        opts.on("--nocolor", "Disable colorized output") do
            String.disable_colorization = true
        end

        opts.on("-s", "--stream=NUM", "Show specified stream") do |s|
            options["stream"] = s.to_i
        end

        opts.on("-u", "--udp", "Use UDP") do
            options["prot"] = "udp"
        end

        opts.on(
            "-v",
            "--verbose",
            "Show backtrace when error occurs"
        ) do
            options["verbose"] = true
        end

        opts.on("", info.word_wrap)
    end

    begin
        parser.parse!
    rescue OptionParser::InvalidOption => e
        puts e.message
        puts parser
        exit PStreamExit::INVALID_OPTION
    rescue OptionParser::InvalidArgument => e
        puts e.message
        puts parser
        exit PStreamExit::INVALID_ARGUMENT
    rescue OptionParser::MissingArgument => e
        puts e.message
        puts parser
        exit PStreamExit::MISSING_ARGUMENT
    end

    if (args.length != 1)
        puts parser
        exit PStreamExit::EXTRA_ARGUMENTS
    end

    options["pcap"] = args[0]
    return options
end

options = parse(ARGV)

begin
    pstream = PStream.new(
        options["pcap"],
        !String.disable_colorization
    )

    if (options["stream"])
        puts pstream.get_stream(
            options["stream"].to_i,
            options["prot"]
        ).to_s
    elsif (options["ciphers"])
        pstream.cipher_negotiations.each do |negotiation|
            puts negotiation.to_s
        end
    else
        # Summarize
        puts pstream.to_s
    end
rescue PStream::Error => e
    $stderr.puts e.message.red
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line.yellow
        end
    end
    exit PStreamExit::EXCEPTION
rescue Interrupt
    # ^C
    # Exit gracefully
rescue Errno::EPIPE
    # Do nothing. This can happen if piping to another program such as
    # less. Usually if less is closed before PStream is done with
    # STDOUT.
rescue Exception => e
    $stderr.puts
    $stderr.puts "Oops! Looks like an error has occured! If the " \
        "error persists, file a bug at:"
    $stderr.puts
    $stderr.puts "    https://gitlab.com/mjwhitta/pstream/issues"
    $stderr.puts
    $stderr.puts "Maybe the message below will help. If not, you " \
        "can use the --verbose flag to get a backtrace.".word_wrap

    $stderr.puts e.message.red
    if (options["verbose"])
        e.backtrace.each do |line|
            $stderr.puts line.yellow
        end
    end
    exit PStreamExit::EXCEPTION
end
exit PStreamExit::GOOD
